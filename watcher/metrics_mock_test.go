// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SamsungSLAV/perun/metrics (interfaces: Gauge,Metrics)

package watcher

import (
	metrics "github.com/SamsungSLAV/perun/metrics"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGauge is a mock of Gauge interface
type MockGauge struct {
	ctrl     *gomock.Controller
	recorder *MockGaugeMockRecorder
}

// MockGaugeMockRecorder is the mock recorder for MockGauge
type MockGaugeMockRecorder struct {
	mock *MockGauge
}

// NewMockGauge creates a new mock instance
func NewMockGauge(ctrl *gomock.Controller) *MockGauge {
	mock := &MockGauge{ctrl: ctrl}
	mock.recorder = &MockGaugeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGauge) EXPECT() *MockGaugeMockRecorder {
	return m.recorder
}

// Dec mocks base method
func (m *MockGauge) Dec() {
	m.ctrl.Call(m, "Dec")
}

// Dec indicates an expected call of Dec
func (mr *MockGaugeMockRecorder) Dec() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dec", reflect.TypeOf((*MockGauge)(nil).Dec))
}

// Inc mocks base method
func (m *MockGauge) Inc() {
	m.ctrl.Call(m, "Inc")
}

// Inc indicates an expected call of Inc
func (mr *MockGaugeMockRecorder) Inc() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inc", reflect.TypeOf((*MockGauge)(nil).Inc))
}

// Set mocks base method
func (m *MockGauge) Set(arg0 float64) {
	m.ctrl.Call(m, "Set", arg0)
}

// Set indicates an expected call of Set
func (mr *MockGaugeMockRecorder) Set(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockGauge)(nil).Set), arg0)
}

// MockMetrics is a mock of Metrics interface
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockMetrics) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockMetricsMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMetrics)(nil).Close))
}

// RegisterGauge mocks base method
func (m *MockMetrics) RegisterGauge(arg0, arg1, arg2, arg3 string) (metrics.Gauge, error) {
	ret := m.ctrl.Call(m, "RegisterGauge", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(metrics.Gauge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterGauge indicates an expected call of RegisterGauge
func (mr *MockMetricsMockRecorder) RegisterGauge(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterGauge", reflect.TypeOf((*MockMetrics)(nil).RegisterGauge), arg0, arg1, arg2, arg3)
}

// Start mocks base method
func (m *MockMetrics) Start() {
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockMetricsMockRecorder) Start() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMetrics)(nil).Start))
}
