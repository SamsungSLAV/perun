// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SamsungSLAV/perun/watcher (interfaces: TaskConsumer)

package watcher

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTaskConsumer is a mock of TaskConsumer interface
type MockTaskConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockTaskConsumerMockRecorder
}

// MockTaskConsumerMockRecorder is the mock recorder for MockTaskConsumer
type MockTaskConsumerMockRecorder struct {
	mock *MockTaskConsumer
}

// NewMockTaskConsumer creates a new mock instance
func NewMockTaskConsumer(ctrl *gomock.Controller) *MockTaskConsumer {
	mock := &MockTaskConsumer{ctrl: ctrl}
	mock.recorder = &MockTaskConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskConsumer) EXPECT() *MockTaskConsumerMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockTaskConsumer) Run(arg0 Task) {
	m.ctrl.Call(m, "Run", arg0)
}

// Run indicates an expected call of Run
func (mr *MockTaskConsumerMockRecorder) Run(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockTaskConsumer)(nil).Run), arg0)
}
